#!/usr/bin/env python3

import sys
import os
import urllib
import httpx
import threading
import time
from openai import OpenAI

openai_key = os.environ["OPENAI_KEY"]

default_system_prompt = "You are a helpful assistant. You are good at computer technologies. You will help the users with their computer related questions."

template = """You are a Linux Shell expert, return a line or lines of commands based on the following requirements, comments starting with hashes (#) are allowed. Return only commands and comments only, no more no less. Use plain text format, avoid markdown, or markdown code "```" (accent grave) formatting. Explain options used in the commands in the end in the form of comments."""

class Spinner:
    busy = False
    delay = 0.3

    @staticmethod
    def spinning_cursor():
        while 1: 
            for cursor in '|/-\\': yield cursor

    def __init__(self, delay=None):
        self.spinner_generator = self.spinning_cursor()
        if delay and float(delay): self.delay = delay

    def spinner_task(self):
        while self.busy:
            sys.stdout.write(next(self.spinner_generator))
            sys.stdout.flush()
            time.sleep(self.delay)
            sys.stdout.write('\b')
            sys.stdout.flush()

    def __enter__(self):
        self.busy = True
        threading.Thread(target=self.spinner_task).start()

    def __exit__(self, exception, value, tb):
        self.busy = False
        time.sleep(self.delay)
        if exception is not None:
            return False


def set_proxy_environment_variables():
    proxies = urllib.request.getproxies()
    http_proxy = proxies.get('http')
    https_proxy = proxies.get('https')

    if http_proxy is not None and http_proxy != "":
        os.environ["HTTP_PROXY"] = http_proxy

    if https_proxy is not None and https_proxy != "":
        os.environ["HTTPS_PROXY"] = https_proxy
    return http_proxy, https_proxy


def create_client(openai_key, http_proxy=None):
    base_url="https://hk.xty.app/v1"
    client = OpenAI(
        base_url=base_url,
        api_key=openai_key,
        http_client=httpx.Client(
            base_url=base_url,
            follow_redirects=True,
            proxy=http_proxy
        ),
    )
    return client


def get_completion(input_string, http_proxy=None):
    client = create_client(openai_key, http_proxy)
    completion_text = None
    default_model = "gpt-3.5-turbo-0125"
    completion = client.chat.completions.create(
      model=default_model,
      messages=[
        {"role": "system", "content": default_system_prompt },
        {"role": "user", "content": "{}".format(input_string)}
      ]
    )
    completion_text = completion.choices[0].message.content
    return completion_text


def usage():
    print("howto <arguments>")
    print("\texample: howto send an Email with curl")
    sys.exit(1)


def main():
    arg_length = len(sys.argv)
    if arg_length <= 1:
        usage()
    arg_string = " ".join(sys.argv[1:])
    arg_string = "{}{}{}".format(
                template,
                os.linesep*2,
                arg_string
            )

    http_proxy = set_proxy_environment_variables()[0]
    if http_proxy:
        http_proxy = "http://{}".format(http_proxy)
    with Spinner():
        text = get_completion(
                input_string=arg_string,
                http_proxy=http_proxy
                )
    print(text)


if __name__ == "__main__":
    main()
